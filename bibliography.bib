
@inproceedings{gibbons_phases_2023,
	location = {Seattle {WA} {USA}},
	title = {Phases in Software Architecture},
	isbn = {9798400702976},
	url = {https://dl.acm.org/doi/10.1145/3609025.3609479},
	doi = {10.1145/3609025.3609479},
	abstract = {The large-scale structure of executing a computation can often be thought of as being separated into distinct phases. But the most natural form in which to specify that computation may well have a different and conflicting structure. For example, the computation might consist of gathering data from some locations, processing it, then distributing the results back to the same locations; it may be executed in three phases—gather, process, distribute—but mostly conveniently specified orthogonally—by location. We have recently shown that this multi-phase structure can be expressed as a novel applicative functor (also known as an idiom, or lax monoidal functor). Here we summarize the idea from the perspective of software architecture. At the end, we speculate about applications to choreography and multi-tier architecture.},
	eventtitle = {{FUNARCH} '23: 1st {ACM} {SIGPLAN} International Workshop on Functional Software Architecture},
	pages = {29--33},
	booktitle = {Proceedings of the 1st {ACM} {SIGPLAN} International Workshop on Functional Software Architecture},
	publisher = {{ACM}},
	author = {Gibbons, Jeremy and Kidney, Donnacha Oisín and Schrijvers, Tom and Wu, Nicolas},
	urldate = {2023-10-02},
	date = {2023-08-30},
	langid = {english},
}

@inproceedings{minamide_functional_1998,
	location = {New York, {NY}, {USA}},
	title = {A functional representation of data structures with a hole},
	isbn = {978-0-89791-979-1},
	url = {https://doi.org/10.1145/268946.268953},
	doi = {10.1145/268946.268953},
	series = {{POPL} '98},
	abstract = {Data structures with a hole, in other words data structures with an uninitialized field, are useful to write efficient programs: they enable us to construct functional data structures flexibly and write functions such as append and map as tail recursive functions. In this paper we present an approach to introducing data structures with a hole into call-by-value functional programming languages like {ML}. Data structures with a hole are formalized as a new form of λ-abstraction called hole abstraction. The novel features of hole abstraction are that expressions inside hole abstraction are evaluated and application is implemented by destructive update of a hole. We present a simply typed call-by-value λ-calculus extended with hole abstractions. Then we show a compilation method of hole abstraction and prove correctness of the compilation.},
	pages = {75--84},
	booktitle = {Proceedings of the 25th {ACM} {SIGPLAN}-{SIGACT} symposium on Principles of programming languages},
	publisher = {Association for Computing Machinery},
	author = {Minamide, Yasuhiko},
	urldate = {2022-03-15},
	date = {1998-01-21},
}
