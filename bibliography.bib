
@inproceedings{shaikhha_destination-passing_2017,
	address = {Oxford UK},
	title = {Destination-passing style for efficient memory management},
	isbn = {978-1-4503-5181-2},
	url = {https://dl.acm.org/doi/10.1145/3122948.3122949},
	doi = {10.1145/3122948.3122949},
	abstract = {We show how to compile high-level functional array-processing programs, drawn from image processing and machine learning, into C code that runs as fast as hand-written C. The key idea is to transform the program to destination-passing style, which in turn enables a highly-efficient stack-like memory allocation discipline.},
	language = {en},
	urldate = {2022-03-15},
	booktitle = {Proceedings of the 6th {ACM} {SIGPLAN} {International} {Workshop} on {Functional} {High}-{Performance} {Computing}},
	publisher = {ACM},
	author = {Shaikhha, Amir and Fitzgibbon, Andrew and Peyton Jones, Simon and Vytiniotis, Dimitrios},
	month = sep,
	year = {2017},
	keywords = {destination, mutable},
	pages = {12--23},
}

@inproceedings{minamide_functional_1998,
	address = {New York, NY, USA},
	series = {{POPL} '98},
	title = {A functional representation of data structures with a hole},
	isbn = {978-0-89791-979-1},
	url = {https://doi.org/10.1145/268946.268953},
	doi = {10.1145/268946.268953},
	abstract = {Data structures with a hole, in other words data structures with an uninitialized field, are useful to write efficient programs: they enable us to construct functional data structures flexibly and write functions such as append and map as tail recursive functions. In this paper we present an approach to introducing data structures with a hole into call-by-value functional programming languages like ML. Data structures with a hole are formalized as a new form of λ-abstraction called hole abstraction. The novel features of hole abstraction are that expressions inside hole abstraction are evaluated and application is implemented by destructive update of a hole. We present a simply typed call-by-value λ-calculus extended with hole abstractions. Then we show a compilation method of hole abstraction and prove correctness of the compilation.},
	urldate = {2022-03-15},
	booktitle = {Proceedings of the 25th {ACM} {SIGPLAN}-{SIGACT} symposium on {Principles} of programming languages},
	publisher = {Association for Computing Machinery},
	author = {Minamide, Yasuhiko},
	month = jan,
	year = {1998},
	keywords = {calculus, destination},
	pages = {75--84},
}

@incollection{girard_linear_1995,
	address = {Cambridge},
	title = {Linear {Logic}: its syntax and semantics},
	isbn = {978-0-511-62915-0},
	shorttitle = {Linear {Logic}},
	url = {https://www.cambridge.org/core/product/identifier/CBO9780511629150A008/type/book_part},
	language = {en},
	urldate = {2022-03-21},
	booktitle = {Advances in {Linear} {Logic}},
	publisher = {Cambridge University Press},
	author = {Girard, J.-Y.},
	editor = {Girard, Jean-Yves and Lafont, Yves and Regnier, Laurent},
	year = {1995},
	doi = {10.1017/CBO9780511629150.002},
	keywords = {linear, logic},
	pages = {1--42},
}

@article{bour_tmc_2021,
	title = {Tail {Modulo} {Cons}},
	url = {http://arxiv.org/abs/2102.09823},
	abstract = {OCaml function calls consume space on the system stack. Operating systems set default limits on the stack space which are much lower than the available memory. If a program runs out of stack space, they get the dreaded "Stack Overflow" exception -- they crash. As a result, OCaml programmers have to be careful, when they write recursive functions, to remain in the so-called \_tail-recursive\_ fragment, using \_tail\_ calls that do not consume stack space. This discipline is a source of difficulties for both beginners and experts. Beginners have to be taught recursion, and then tail-recursion. Experts disagree on the "right" way to write `List.map`. The direct version is beautiful but not tail-recursive, so it crashes on larger inputs. The naive tail-recursive transformation is (slightly) slower than the direct version, and experts may want to avoid that cost. Some libraries propose horrible implementations, unrolling code by hand, to compensate for this performance loss. In general, tail-recursion requires the programmer to manually perform sophisticated program transformations. In this work we propose an implementation of "Tail Modulo Cons" (TMC) for OCaml. TMC is a program transformation for a fragment of non-tail-recursive functions, that rewrites them in \_destination-passing style\_. The supported fragment is smaller than other approaches such as continuation-passing-style, but the performance of the transformed code is on par with the direct, non-tail-recursive version. Many useful functions that traverse a recursive datastructure and rebuild another recursive structure are in the TMC fragment, in particular `List.map` (and `List.filter`, `List.append`, etc.). Finally those functions can be written in a way that is beautiful, correct on all inputs, and efficient.},
	urldate = {2022-03-22},
	journal = {arXiv:2102.09823 [cs]},
	author = {Bour, Frédéric and Clément, Basile and Scherer, Gabriel},
	month = feb,
	year = {2021},
	note = {arXiv: 2102.09823},
	keywords = {caml, destination, mutable, tail-recursion},
}

@inproceedings{yang_efficient_2015,
	address = {Vancouver BC Canada},
	title = {Efficient communication and collection with compact normal forms},
	isbn = {978-1-4503-3669-7},
	url = {https://dl.acm.org/doi/10.1145/2784731.2784735},
	doi = {10.1145/2784731.2784735},
	abstract = {In distributed applications, the transmission of non-contiguous data structures is greatly slowed down by the need to serialize them into a buffer before sending. We describe Compact Normal Forms, an API that allows programmers to explicitly place immutable heap objects into regions, which can both be accessed like ordinary data as well as efﬁciently transmitted over the network. The process of placing objects into compact regions (essentially a copy) is faster than any serializer and can be amortized over a series of functional updates to the data structure in question. We implement this scheme in the Glasgow Haskell Compiler and show that even with the space expansion attendant with memory-oriented data structure representations, we achieve between ×2 and ×4 speedups on fast local networks with sufﬁciently large data structures.},
	language = {en},
	urldate = {2022-04-04},
	booktitle = {Proceedings of the 20th {ACM} {SIGPLAN} {International} {Conference} on {Functional} {Programming}},
	publisher = {ACM},
	author = {Yang, Edward Z. and Campagna, Giovanni and Ağacan, Ömer S. and El-Hassany, Ahmed and Kulkarni, Abhishek and Newton, Ryan R.},
	month = aug,
	year = {2015},
	keywords = {compact-regions, memory, serialization},
	pages = {362--374},
}

@article{bernardy_linear_2018,
	title = {Linear {Haskell}: practical linearity in a higher-order polymorphic language},
	volume = {2},
	issn = {2475-1421},
	shorttitle = {Linear {Haskell}},
	url = {http://arxiv.org/abs/1710.09756},
	doi = {10.1145/3158093},
	abstract = {Linear type systems have a long and storied history, but not a clear path forward to integrate with existing languages such as OCaml or Haskell. In this paper, we study a linear type system designed with two crucial properties in mind: backwards-compatibility and code reuse across linear and non-linear users of a library. Only then can the benefits of linear types permeate conventional functional programming. Rather than bifurcate types into linear and non-linear counterparts, we instead attach linearity to function arrows. Linear functions can receive inputs from linearly-bound values, but can also operate over unrestricted, regular values. To demonstrate the efficacy of our linear type system - both how easy it can be integrated in an existing language implementation and how streamlined it makes it to write programs with linear types - we implemented our type system in GHC, the leading Haskell compiler, and demonstrate two kinds of applications of linear types: mutable data with pure interfaces; and enforcing protocols in I/O-performing functions.},
	number = {POPL},
	urldate = {2022-06-23},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Bernardy, Jean-Philippe and Boespflug, Mathieu and Newton, Ryan R. and Jones, Simon Peyton and Spiwack, Arnaud},
	month = jan,
	year = {2018},
	note = {arXiv:1710.09756 [cs]},
	keywords = {Computer Science - Programming Languages},
	pages = {1--29},
}

@inproceedings{gibbons_phases_2023,
	address = {Seattle WA USA},
	title = {Phases in {Software} {Architecture}},
	isbn = {9798400702976},
	url = {https://dl.acm.org/doi/10.1145/3609025.3609479},
	doi = {10.1145/3609025.3609479},
	abstract = {The large-scale structure of executing a computation can often be thought of as being separated into distinct phases. But the most natural form in which to specify that computation may well have a different and conflicting structure. For example, the computation might consist of gathering data from some locations, processing it, then distributing the results back to the same locations; it may be executed in three phases—gather, process, distribute—but mostly conveniently specified orthogonally—by location. We have recently shown that this multi-phase structure can be expressed as a novel applicative functor (also known as an idiom, or lax monoidal functor). Here we summarize the idea from the perspective of software architecture. At the end, we speculate about applications to choreography and multi-tier architecture.},
	language = {en},
	urldate = {2023-10-02},
	booktitle = {Proceedings of the 1st {ACM} {SIGPLAN} {International} {Workshop} on {Functional} {Software} {Architecture}},
	publisher = {ACM},
	author = {Gibbons, Jeremy and Kidney, Donnacha Oisín and Schrijvers, Tom and Wu, Nicolas},
	month = aug,
	year = {2023},
	pages = {29--33},
}

@inproceedings{protzenko_mezzo_2013,
	title = {Programming with {Permissions} in {Mezzo}},
	url = {http://arxiv.org/abs/1311.7242},
	doi = {10.1145/2500365.2500598},
	abstract = {We present Mezzo, a typed programming language of ML lineage. Mezzo is equipped with a novel static discipline of duplicable and affine permissions, which controls aliasing and ownership. This rules out certain mistakes, including representation exposure and data races, and enables new idioms, such as gradual initialization, memory re-use, and (type)state changes. Although the core static discipline disallows sharing a mutable data structure, Mezzo offers several ways of working around this restriction, including a novel dynamic ownership control mechanism which we dub "adoption and abandon".},
	urldate = {2023-10-16},
	booktitle = {Proceedings of the 18th {ACM} {SIGPLAN} international conference on {Functional} programming},
	author = {Protzenko, Jonathan and Pottier, François},
	month = sep,
	year = {2013},
	note = {arXiv:1311.7242 [cs]},
	keywords = {Computer Science - Programming Languages, D.3.2},
	pages = {173--184},
}


@inproceedings{okasaki_bfs_2000,
	address = {New York, NY, USA},
	series = {{ICFP} '00},
	title = {Breadth-first numbering: lessons from a small exercise in algorithm design},
	isbn = {978-1-58113-202-1},
	shorttitle = {Breadth-first numbering},
	url = {https://dl.acm.org/doi/10.1145/351240.351253},
	doi = {10.1145/351240.351253},
	abstract = {Every programmer has blind spots. Breadth-first numbering is an interesting toy problem that exposes a blind spot common to many---perhaps most---functional programmers.},
	urldate = {2023-10-12},
	booktitle = {Proceedings of the fifth {ACM} {SIGPLAN} international conference on {Functional} programming},
	publisher = {Association for Computing Machinery},
	author = {Okasaki, Chris},
	month = sep,
	year = {2000},
	keywords = {Breadth-first numbering, breadth-first traversal, views},
	pages = {131--136},
	file = {Full Text PDF:/home/thomas/Zotero/storage/RWTQGQAF/Okasaki - 2000 - Breadth-first numbering lessons from a small exer.pdf:application/pdf},
}

@phdthesis{larus_restructuring_1989,
	type = {phd},
	title = {Restructuring symbolic programs for concurrent execution on multiprocessors},
	abstract = {C scURARE, the program restructurer described in this dissertation, automatically transforms a sequential Lisp program into an equivalent concurrent program that executes on a multiprocessor. C scURARE first analyzes a program to find its control and data dependences. This analysis is most difficult for references to structures connected by pointers. C scURARE uses a new data-dependence algorithm, which finds and classifies these dependences. The analysis is conservative and may detect conflicts that do not arise in practice. A programmer can temper and refine its results with declarations. Dependences constrain the program's concurrent execution because, in general, two conflicting statements cannot execute in a different order without affecting the program's result. A restructurer must know all dependences in order to preserve them. However, not all dependences are essential to produce the program's result. C scURARE attempts to transform the program so it computes its result with fewer conflicts. An optimized program will execute with less synchronization and more concurrency. C scURARE then examines loops in a program to find those that are unconstrained or lightly constrained by dependences. By necessity, C scURARE treats recursive functions as loops and does not limit itself to explicit program loops. Recursive functions offer several advantages over explicit loops since they provide a convenient framework for inserting locks and handling the dynamic behavior of symbolic programs. Loops that are suitable for concurrent execution are changed to execute on a set of concurrent server processes. These servers execute single loop iterations and therefore need to be extremely inexpensive to invoke. Restructured programs execute significantly faster than the original sequential programs. This improvement is large enough to attract programmers to a multiprocessor, particularly since it requires little effort on their part. Although restructured programs may not make optimal use of a multiprocessor's parallelism, they make good use of a programmer's time.},
	school = {University of California, Berkeley},
	author = {Larus, James Richard},
	year = {1989},
	note = {AAI9006407},
}

@article{spiwack_linearly_2022,
	title = {Linearly qualified types: generic inference for capabilities and uniqueness},
	volume = {6},
	shorttitle = {Linearly qualified types},
	url = {https://dl.acm.org/doi/10.1145/3547626},
	doi = {10.1145/3547626},
	abstract = {A linear parameter must be consumed exactly once in the body of its function. When declaring resources such as file handles and manually managed memory as linear arguments, a linear type system can verify that these resources are used safely. However, writing code with explicit linear arguments requires bureaucracy. This paper presents linear constraints, a front-end feature for linear typing that decreases the bureaucracy of working with linear types. Linear constraints are implicit linear arguments that are filled in automatically by the compiler. We present linear constraints as a qualified type system,together with an inference algorithm which extends GHC's existing constraint solver algorithm. Soundness of linear constraints is ensured by the fact that they desugar into Linear Haskell.},
	number = {ICFP},
	urldate = {2023-10-16},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Spiwack, Arnaud and Kiss, Csongor and Bernardy, Jean-Philippe and Wu, Nicolas and Eisenberg, Richard A.},
	month = aug,
	year = {2022},
	keywords = {constraints, GHC, Haskell, inference, linear logic, linear types, qualified types},
	pages = {95:137--95:164},
}

@article{jones_gibbons_linearbfs_93,
	title = {Linear-time {Breadth}-first {Tree} {Algorithms}: {An} {Exercise} in the {Arithmetic} of {Folds} and {Zips}},
	shorttitle = {Linear-time {Breadth}-first {Tree} {Algorithms}},
	url = {https://www.cs.ox.ac.uk/publications/publication2363-abstract.html},
	abstract = {This paper is about an application of the mathematics of the zip, reduce (fold) and accumulate (scan) operations on lists. It gives an account of the derivation of a linear-time breadth-first tree traversal algorithm, and of a subtle and efficient breadth-first tree labelling algorithm.},
	language = {en-gb},
	number = {No. 71},
	urldate = {2023-10-18},
	author = {Gibbons, Jeremy},
	year = {1993},
	note = {Number: No. 71},
}
